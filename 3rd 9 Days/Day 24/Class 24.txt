insort/preorder/postorder ...

inorder: left->root->right
preorder: root->left->right
postorder: left->right->root

void inorder(TreeNode* node) {
    if (node != nulptr) {
        inorder(node->left);
        cout << node->val << " ";
        inorder(node->right);
    }
}

void preorder(TreeNode* node) {
    if (node != nullptr) {
        cout << node->val << " ";
        preorder(node->left);
        preorder(node->right);
    }
}

void postorder(TreeNode* node) {
    if (node != nullptr) {
        postorder(node->left);
        postorder(node->right);
        cout << node->val << " ";
    }
}


insert node anywhere...

insert and delete in binary tree -> not in syllabus but learn

binary search tree -> left if less and right if more

inorder of BST is always sorted